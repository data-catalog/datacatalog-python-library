# coding: utf-8

"""
    Data Catalog Versioning API

    This API is used to communicate with the versioning service of the Data Catalog application.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: szilardtumo@stud.ubbcluj.ro
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_catalog.client.versioning.configuration import Configuration


class ErrorResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'datetime',
        'status': 'int',
        'error': 'str',
        'message': 'str',
        'path': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'status': 'status',
        'error': 'error',
        'message': 'message',
        'path': 'path'
    }

    def __init__(self, timestamp=None, status=None, error=None, message=None, path=None, local_vars_configuration=None):  # noqa: E501
        """ErrorResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timestamp = None
        self._status = None
        self._error = None
        self._message = None
        self._path = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        self.status = status
        if error is not None:
            self.error = error
        if message is not None:
            self.message = message
        if path is not None:
            self.path = path

    @property
    def timestamp(self):
        """Gets the timestamp of this ErrorResponse.  # noqa: E501

        The time of the error response being sent.  # noqa: E501

        :return: The timestamp of this ErrorResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ErrorResponse.

        The time of the error response being sent.  # noqa: E501

        :param timestamp: The timestamp of this ErrorResponse.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def status(self):
        """Gets the status of this ErrorResponse.  # noqa: E501

        The status code of the response.  # noqa: E501

        :return: The status of this ErrorResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorResponse.

        The status code of the response.  # noqa: E501

        :param status: The status of this ErrorResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                status is not None and status > 599):  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `599`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                status is not None and status < 100):  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `100`")  # noqa: E501

        self._status = status

    @property
    def error(self):
        """Gets the error of this ErrorResponse.  # noqa: E501

        The status description of the response.  # noqa: E501

        :return: The error of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ErrorResponse.

        The status description of the response.  # noqa: E501

        :param error: The error of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def message(self):
        """Gets the message of this ErrorResponse.  # noqa: E501

        A description of the error.  # noqa: E501

        :return: The message of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorResponse.

        A description of the error.  # noqa: E501

        :param message: The message of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def path(self):
        """Gets the path of this ErrorResponse.  # noqa: E501

        The path at which the request was sent.  # noqa: E501

        :return: The path of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ErrorResponse.

        The path at which the request was sent.  # noqa: E501

        :param path: The path of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorResponse):
            return True

        return self.to_dict() != other.to_dict()

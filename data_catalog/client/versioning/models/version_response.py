# coding: utf-8

"""
    Data Catalog Versioning API

    This API is used to communicate with the versioning service of the Data Catalog application.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: szilardtumo@stud.ubbcluj.ro
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_catalog.client.versioning.configuration import Configuration


class VersionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'asset_id': 'str',
        'contents': 'list[ContentResponse]',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'asset_id': 'assetId',
        'contents': 'contents',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, name=None, asset_id=None, contents=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """VersionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._asset_id = None
        self._contents = None
        self._created_at = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.asset_id = asset_id
        self.contents = contents
        self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this VersionResponse.  # noqa: E501

        Unique identifier of the version.  # noqa: E501

        :return: The id of this VersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VersionResponse.

        Unique identifier of the version.  # noqa: E501

        :param id: The id of this VersionResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this VersionResponse.  # noqa: E501

        The name (or tag) of the version.  # noqa: E501

        :return: The name of this VersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VersionResponse.

        The name (or tag) of the version.  # noqa: E501

        :param name: The name of this VersionResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def asset_id(self):
        """Gets the asset_id of this VersionResponse.  # noqa: E501

        The unique identifier of the asset having this version.  # noqa: E501

        :return: The asset_id of this VersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this VersionResponse.

        The unique identifier of the asset having this version.  # noqa: E501

        :param asset_id: The asset_id of this VersionResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and asset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def contents(self):
        """Gets the contents of this VersionResponse.  # noqa: E501

        The list of contents which are present in this version.  # noqa: E501

        :return: The contents of this VersionResponse.  # noqa: E501
        :rtype: list[ContentResponse]
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this VersionResponse.

        The list of contents which are present in this version.  # noqa: E501

        :param contents: The contents of this VersionResponse.  # noqa: E501
        :type: list[ContentResponse]
        """
        if self.local_vars_configuration.client_side_validation and contents is None:  # noqa: E501
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents

    @property
    def created_at(self):
        """Gets the created_at of this VersionResponse.  # noqa: E501

        The datetime when this version was created.  # noqa: E501

        :return: The created_at of this VersionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VersionResponse.

        The datetime when this version was created.  # noqa: E501

        :param created_at: The created_at of this VersionResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VersionResponse):
            return True

        return self.to_dict() != other.to_dict()

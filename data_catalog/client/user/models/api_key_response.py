# coding: utf-8

"""
    Data Catalog User Service API

    The user handling service of the Data Catalog application.  Provides API endpoints to register, and log in to the application.  It communicates with other services to tell informations about tokens, thus authorizing a request made at another service. Provides endpoints to delete, and list users for administrative purposes.  The api supports JWT token, and API key authentication.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: szilard.tumo@stud.ubbcluj.ro
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_catalog.client.user.configuration import Configuration


class ApiKeyResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'id': 'str'
    }

    attribute_map = {
        'title': 'title',
        'id': 'id'
    }

    def __init__(self, title=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ApiKeyResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._id = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if id is not None:
            self.id = id

    @property
    def title(self):
        """Gets the title of this ApiKeyResponse.  # noqa: E501

        The name of the API key.  # noqa: E501

        :return: The title of this ApiKeyResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ApiKeyResponse.

        The name of the API key.  # noqa: E501

        :param title: The title of this ApiKeyResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def id(self):
        """Gets the id of this ApiKeyResponse.  # noqa: E501

        The ID of the api key.  # noqa: E501

        :return: The id of this ApiKeyResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiKeyResponse.

        The ID of the api key.  # noqa: E501

        :param id: The id of this ApiKeyResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKeyResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiKeyResponse):
            return True

        return self.to_dict() != other.to_dict()

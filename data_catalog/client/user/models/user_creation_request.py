# coding: utf-8

"""
    Data Catalog User Service API

    The user handling service of the Data Catalog application.  Provides API endpoints to register, and log in to the application.  It communicates with other services to tell informations about tokens, thus authorizing a request made at another service. Provides endpoints to delete, and list users for administrative purposes.  The api supports JWT token, and API key authentication.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: szilard.tumo@stud.ubbcluj.ro
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_catalog.client.user.configuration import Configuration


class UserCreationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'username': 'str',
        'password': 'str'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'username': 'username',
        'password': 'password'
    }

    def __init__(self, email=None, first_name=None, last_name=None, username=None, password=None, local_vars_configuration=None):  # noqa: E501
        """UserCreationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._first_name = None
        self._last_name = None
        self._username = None
        self._password = None
        self.discriminator = None

        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.password = password

    @property
    def email(self):
        """Gets the email of this UserCreationRequest.  # noqa: E501

        The e-mail address of the user. Another user with this email must not exist in the application.  # noqa: E501

        :return: The email of this UserCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreationRequest.

        The e-mail address of the user. Another user with this email must not exist in the application.  # noqa: E501

        :param email: The email of this UserCreationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserCreationRequest.  # noqa: E501

        The first name of the user.  # noqa: E501

        :return: The first_name of this UserCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserCreationRequest.

        The first name of the user.  # noqa: E501

        :param first_name: The first_name of this UserCreationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserCreationRequest.  # noqa: E501

        The last name of the user.  # noqa: E501

        :return: The last_name of this UserCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserCreationRequest.

        The last name of the user.  # noqa: E501

        :param last_name: The last_name of this UserCreationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def username(self):
        """Gets the username of this UserCreationRequest.  # noqa: E501

        The username of the user. This will appear to other users.  # noqa: E501

        :return: The username of this UserCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserCreationRequest.

        The username of the user. This will appear to other users.  # noqa: E501

        :param username: The username of this UserCreationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) < 3):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `3`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this UserCreationRequest.  # noqa: E501

        Password of minimum 6 characters, which contains at least a number and a letter.  # noqa: E501

        :return: The password of this UserCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreationRequest.

        Password of minimum 6 characters, which contains at least a number and a letter.  # noqa: E501

        :param password: The password of this UserCreationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                password is not None and len(password) < 6):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `6`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                password is not None and not re.search(r'^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$', password)):  # noqa: E501
            raise ValueError(r"Invalid value for `password`, must be a follow pattern or equal to `/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/`")  # noqa: E501

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserCreationRequest):
            return True

        return self.to_dict() != other.to_dict()

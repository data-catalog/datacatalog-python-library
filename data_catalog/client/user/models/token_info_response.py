# coding: utf-8

"""
    Data Catalog User Service API

    The user handling service of the Data Catalog application.  Provides API endpoints to register, and log in to the application.  It communicates with other services to tell informations about tokens, thus authorizing a request made at another service. Provides endpoints to delete, and list users for administrative purposes.  The api supports JWT token, and API key authentication.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: szilard.tumo@stud.ubbcluj.ro
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_catalog.client.user.configuration import Configuration


class TokenInfoResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'user_id': 'str',
        'username': 'str',
        'role': 'str',
        'exp': 'int',
        'iat': 'int'
    }

    attribute_map = {
        'active': 'active',
        'user_id': 'userId',
        'username': 'username',
        'role': 'role',
        'exp': 'exp',
        'iat': 'iat'
    }

    def __init__(self, active=None, user_id=None, username=None, role=None, exp=None, iat=None, local_vars_configuration=None):  # noqa: E501
        """TokenInfoResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._user_id = None
        self._username = None
        self._role = None
        self._exp = None
        self._iat = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if role is not None:
            self.role = role
        if exp is not None:
            self.exp = exp
        if iat is not None:
            self.iat = iat

    @property
    def active(self):
        """Gets the active of this TokenInfoResponse.  # noqa: E501

        This is a boolean value indicating if the token is currently active.  # noqa: E501

        :return: The active of this TokenInfoResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TokenInfoResponse.

        This is a boolean value indicating if the token is currently active.  # noqa: E501

        :param active: The active of this TokenInfoResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def user_id(self):
        """Gets the user_id of this TokenInfoResponse.  # noqa: E501

        The ID of the user that the token was issued to.  # noqa: E501

        :return: The user_id of this TokenInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TokenInfoResponse.

        The ID of the user that the token was issued to.  # noqa: E501

        :param user_id: The user_id of this TokenInfoResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                user_id is not None and len(user_id) < 1):
            raise ValueError("Invalid value for `user_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this TokenInfoResponse.  # noqa: E501

        The username of the user that the token was issued to.  # noqa: E501

        :return: The username of this TokenInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TokenInfoResponse.

        The username of the user that the token was issued to.  # noqa: E501

        :param username: The username of this TokenInfoResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) < 1):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def role(self):
        """Gets the role of this TokenInfoResponse.  # noqa: E501

        The role of the user that the token was issued to.   # noqa: E501

        :return: The role of this TokenInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TokenInfoResponse.

        The role of the user that the token was issued to.   # noqa: E501

        :param role: The role of this TokenInfoResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["USER", "ADMIN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def exp(self):
        """Gets the exp of this TokenInfoResponse.  # noqa: E501

        The unix timestamp indicating when this token will expire.  # noqa: E501

        :return: The exp of this TokenInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this TokenInfoResponse.

        The unix timestamp indicating when this token will expire.  # noqa: E501

        :param exp: The exp of this TokenInfoResponse.  # noqa: E501
        :type: int
        """

        self._exp = exp

    @property
    def iat(self):
        """Gets the iat of this TokenInfoResponse.  # noqa: E501

        Unix timestamp indicating when this token was originally issued.  # noqa: E501

        :return: The iat of this TokenInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._iat

    @iat.setter
    def iat(self, iat):
        """Sets the iat of this TokenInfoResponse.

        Unix timestamp indicating when this token was originally issued.  # noqa: E501

        :param iat: The iat of this TokenInfoResponse.  # noqa: E501
        :type: int
        """

        self._iat = iat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenInfoResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TokenInfoResponse):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Data Catalog Asset Service API

    The asset handling service of the Data Catalog application.  Provides API endpoints to create, delete, and modify assets. It also manages the access rights to the assets, as private assets are only available to users that are members of it.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: szilard.tumo@stud.ubbcluj.ro
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_catalog.client.asset.configuration import Configuration


class AssetCreationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'short_description': 'str',
        'location': 'LocationCreationRequest',
        'tags': 'list[str]',
        'format': 'str',
        'is_public': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'short_description': 'shortDescription',
        'location': 'location',
        'tags': 'tags',
        'format': 'format',
        'is_public': 'isPublic'
    }

    def __init__(self, name=None, description=None, short_description=None, location=None, tags=None, format=None, is_public=None, local_vars_configuration=None):  # noqa: E501
        """AssetCreationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._short_description = None
        self._location = None
        self._tags = None
        self._format = None
        self._is_public = None
        self.discriminator = None

        self.name = name
        self.description = description
        if short_description is not None:
            self.short_description = short_description
        self.location = location
        if tags is not None:
            self.tags = tags
        self.format = format
        self.is_public = is_public

    @property
    def name(self):
        """Gets the name of this AssetCreationRequest.  # noqa: E501

        The name of the data asset.  # noqa: E501

        :return: The name of this AssetCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetCreationRequest.

        The name of the data asset.  # noqa: E501

        :param name: The name of this AssetCreationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 256):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this AssetCreationRequest.  # noqa: E501

        A longer description about the content of the asset. Supports rich text formatting.  # noqa: E501

        :return: The description of this AssetCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssetCreationRequest.

        A longer description about the content of the asset. Supports rich text formatting.  # noqa: E501

        :param description: The description of this AssetCreationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def short_description(self):
        """Gets the short_description of this AssetCreationRequest.  # noqa: E501

        Short description breifly defining the contents of the asset.  # noqa: E501

        :return: The short_description of this AssetCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this AssetCreationRequest.

        Short description breifly defining the contents of the asset.  # noqa: E501

        :param short_description: The short_description of this AssetCreationRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                short_description is not None and len(short_description) > 512):
            raise ValueError("Invalid value for `short_description`, length must be less than or equal to `512`")  # noqa: E501

        self._short_description = short_description

    @property
    def location(self):
        """Gets the location of this AssetCreationRequest.  # noqa: E501


        :return: The location of this AssetCreationRequest.  # noqa: E501
        :rtype: LocationCreationRequest
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AssetCreationRequest.


        :param location: The location of this AssetCreationRequest.  # noqa: E501
        :type: LocationCreationRequest
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def tags(self):
        """Gets the tags of this AssetCreationRequest.  # noqa: E501

        A list of keywords assigned to the asset.  # noqa: E501

        :return: The tags of this AssetCreationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssetCreationRequest.

        A list of keywords assigned to the asset.  # noqa: E501

        :param tags: The tags of this AssetCreationRequest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def format(self):
        """Gets the format of this AssetCreationRequest.  # noqa: E501

        The file format of the asset.   # noqa: E501

        :return: The format of this AssetCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AssetCreationRequest.

        The file format of the asset.   # noqa: E501

        :param format: The format of this AssetCreationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and format is None:  # noqa: E501
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["csv", "json"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def is_public(self):
        """Gets the is_public of this AssetCreationRequest.  # noqa: E501

        Whether the asset is accessible by anyone or not.  # noqa: E501

        :return: The is_public of this AssetCreationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this AssetCreationRequest.

        Whether the asset is accessible by anyone or not.  # noqa: E501

        :param is_public: The is_public of this AssetCreationRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_public is None:  # noqa: E501
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetCreationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetCreationRequest):
            return True

        return self.to_dict() != other.to_dict()
